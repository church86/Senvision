*This directory was created to find sentiment words that correlated most highly with stock movement. This method produced pretty decent accuracies, but for the moment we're using the NLTK frequent words approach.
*The Vocab directory contains files for "good" sentiment words and "bad" sentiment words.
*The synonyms directory contains synonyms of those "good" and "bad" words, which can be used if you want to increase power.
*tweetfrequencycount.py counts the frequencies of each word in our collection of Tweets and outputs it into the tweetfrequencies directory. Respectively for newsfrequencycount.py.
*Then tweetcorrelation.py and newscorrelation.py perform a point biserial correlation between the frequency of a given word and whether the stock movement goes up or down for a given company. It selects words that have at least a (+/-) 30% correlation, and these words go into the directory "(tweet/news)finalwords".
*tweettestmodelclusters4.py and newstestmodelclusters4.py are then used to generate descriptors based off of the words selected in the previous step. These files are then ready to be trained on.